import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.switch_backend('Agg')


band_colors = {'blue': 'b', 'green': 'g', 'red': 'r', 'nir': 'k'}
satellite_styles = {'landsat8': 'o-', 'sentinel2': 'd--', 'newsat': 'd-'}


# Spectral Response Function, providing response per wavelength
class SRF:

    def __init__(self, start, end, response, satellite=None, band=None):
        """

        :param start: wavelength of response[0], in [nm]
        :param end: wavelength of response[0], in [nm]
        :param response: [response]. spacing is derived automatically
        :param satellite: satellite name, e.g. 'landsat8'. optional
        :param band: band name, e.g. 'red'. optional
        """
        self.start = start
        self.end = end
        self.response = response
        self.wavelengths = np.linspace(self.start, self.end, len(self.response))
        self.satellite = satellite or ''
        self.band = band or ''

    def __call__(self, wavelength):
        """
        calculate SRF at specified wavelength (using linear interpolation).
        :param wavelength: single value or array. in [nm]
        :return: single value or array of responses. returns np.nan if outside the range
        """
        return np.interp(wavelength, self.wavelengths, self.response, left=np.nan, right=np.nan)

    @property
    def spacing(self):
        return self.wavelengths[1] - self.wavelengths[0]

    @property
    def bandwidth(self):
        return self.end - self.start

    @property
    def center(self):
        return (self.start + self.end) / 2

    def as_dataframe(self):
        return pd.DataFrame({'response': list(self.response)}, columns=['response'], index=self.wavelengths)


class Sentinel2Blue(SRF):
    def __init__(self):
        # taken from https://github.com/robintw/Py6S/blob/master/Py6S/Params/wavelength.py#L612
        super().__init__(455., 530.,
                         [0.00903, 0.06152, 0.29220, 0.38410, 0.40016, 0.43699, 0.50532, 0.53212,
                          0.53466, 0.55070, 0.60197, 0.61734, 0.57586, 0.54412, 0.57168, 0.65330,
                          0.73840, 0.77085, 0.78836, 0.81658, 0.84498, 0.83295, 0.78694, 0.76370,
                          0.81003, 0.92817, 1.00000, 0.81615, 0.28699, 0.08400, 0.02508, ],
                         'sentinel2', 'blue')


class Sentinel2Green(SRF):
    def __init__(self):
        # taken from https://github.com/robintw/Py6S/blob/master/Py6S/Params/wavelength.py#L621
        super().__init__(537.5, 582.5,
                         [0.00861, 0.08067, 0.45720, 0.82804, 0.89007, 0.86027, 0.83333, 0.86773,
                          0.95043, 1.00000, 0.96410, 0.86866, 0.80267, 0.78961, 0.83845, 0.85799,
                          0.50599, 0.09829, 0.00826, ],
                         'sentinel2', 'green')


class Sentinel2Red(SRF):
    def __init__(self):
        # taken from https://github.com/robintw/Py6S/blob/master/Py6S/Params/wavelength.py#L628
        super().__init__(647.5, 682.5,
                         [0.09225, 0.81775, 0.99038, 0.99545, 0.95701, 0.81417, 0.76998, 0.83083,
                          0.89627, 0.95593, 0.97240, 0.96571, 0.91448, 0.42297, 0.04189],
                         'sentinel2', 'red')


class PerfectSRF(SRF):  # mostly for tests
    def __init__(self, start, end):
        super().__init__(start, end, [1, 1], 'perfect', 'gray')


class NewsatBlue(SRF):
    def __init__(self):
        # estimated by Satellogic
        super().__init__(408, 502,
                         [0.0922, 0.09311, 0.09403, 0.09495, 0.09586, 0.09638, 0.09688, 0.09737, 0.09787, 0.09837,
                          0.09891, 0.09946, 0.10001, 0.10056, 0.10111, 0.1018, 0.10251, 0.10322, 0.10393, 0.10464,
                          0.10524, 0.10581, 0.10639, 0.10697, 0.10754, 0.10813, 0.10871, 0.10929, 0.10987, 0.11046,
                          0.11097, 0.11147, 0.11196, 0.11246, 0.11296, 0.11339, 0.1138, 0.11421, 0.11462, 0.11503,
                          0.1155, 0.116, 0.11649, 0.11699, 0.11748, 0.11797, 0.11847, 0.11897, 0.11946, 0.11996,
                          0.12039, 0.1208, 0.1212, 0.12161, 0.12201, 0.12233, 0.12259, 0.12285, 0.12311, 0.12337,
                          0.1237, 0.12406, 0.12443, 0.1248, 0.12517, 0.12549, 0.12578, 0.12607, 0.12637, 0.12666,
                          0.12708, 0.12761, 0.12814, 0.12868, 0.12921, 0.1299, 0.13074, 0.13157, 0.13241, 0.13325,
                          0.13392, 0.13442, 0.13491, 0.13541, 0.1359, 0.13625, 0.13642, 0.13659, 0.13676, 0.13694,
                          0.1371, 0.13726, 0.13742, 0.13758, 0.13775],
                         'newsat', 'blue')


class NewsatGreen(SRF):
    def __init__(self):
        # estimated by Satellogic
        super().__init__(518, 574,
                         [0.13282, 0.13327, 0.13371, 0.13416, 0.1346, 0.13503, 0.1354, 0.13578, 0.13616, 0.13653,
                          0.1369, 0.13725, 0.13761, 0.13796, 0.13831, 0.1386, 0.13866, 0.13872, 0.13878, 0.13883,
                          0.1389, 0.13899, 0.13908, 0.13917, 0.13926, 0.13933, 0.1393, 0.13927, 0.13924, 0.13921,
                          0.13918, 0.13918, 0.13918, 0.13918, 0.13918, 0.13918, 0.13918, 0.13918, 0.13918, 0.13918,
                          0.13919, 0.13943, 0.13968, 0.13992, 0.14016, 0.14041, 0.14094, 0.14148, 0.14202, 0.14255,
                          0.14309, 0.14319, 0.14329, 0.14339, 0.1435, 0.1436, 0.14337],
                         'newsat', 'green')


class NewsatRed(SRF):
    def __init__(self):
        # estimated by Satellogic
        super().__init__(592, 687,
                         [0.11041, 0.11049, 0.11045, 0.11039, 0.11033, 0.11026, 0.1102, 0.11044, 0.11074, 0.11104,
                          0.11134, 0.11164, 0.11216, 0.11274, 0.11332, 0.1139, 0.11448, 0.11499, 0.11548, 0.11598,
                          0.11647, 0.11697, 0.11742, 0.11786, 0.1183, 0.11874, 0.11918, 0.11966, 0.12017, 0.12068,
                          0.12118, 0.12169, 0.12221, 0.12275, 0.12328, 0.12381, 0.12434, 0.12444, 0.12428, 0.12413,
                          0.12397, 0.12382, 0.12344, 0.12291, 0.12238, 0.12184, 0.12131, 0.12097, 0.12075, 0.12054,
                          0.12033, 0.12011, 0.12001, 0.12001, 0.12001, 0.12001, 0.12001, 0.11987, 0.11959, 0.11931,
                          0.11903, 0.11875, 0.11843, 0.11806, 0.11769, 0.11733, 0.11696, 0.11672, 0.11664, 0.11655,
                          0.11647, 0.11638, 0.11633, 0.11633, 0.11633, 0.11633, 0.11633, 0.11621, 0.1159, 0.11559,
                          0.11528, 0.11497, 0.11459, 0.1141, 0.11361, 0.11312, 0.11263, 0.11236, 0.11254, 0.11272,
                          0.11289, 0.11307, 0.11339, 0.11401, 0.11463, 0.11525],
                         'newsat', 'red')


class NewsatNir(SRF):
    def __init__(self):
        # estimated by Satellogic
        super().__init__(750, 899,
                         [0.07924, 0.0788, 0.07836, 0.07792, 0.07748, 0.07696, 0.07642, 0.07588, 0.07534, 0.0748,
                          0.07463, 0.07453, 0.07443, 0.07432, 0.07422, 0.0742, 0.0742, 0.0742, 0.0742, 0.0742, 0.0742,
                          0.0742, 0.0742, 0.0742, 0.0742, 0.0742, 0.07419, 0.07419, 0.07419, 0.07418, 0.07374, 0.07313,
                          0.07252, 0.07192, 0.07131, 0.07063, 0.06992, 0.06921, 0.0685, 0.06779, 0.06721, 0.0667,
                          0.06619, 0.06567, 0.06516, 0.06471, 0.06428, 0.06385, 0.06342, 0.063, 0.06266, 0.06239,
                          0.06212, 0.06185, 0.06158, 0.06131, 0.06105, 0.06078, 0.06052, 0.06025, 0.05995, 0.0596,
                          0.05926, 0.05892, 0.05858, 0.05821, 0.05783, 0.05745, 0.05707, 0.05669, 0.05637, 0.05611,
                          0.05585, 0.0556, 0.05534, 0.05508, 0.05483, 0.05459, 0.05434, 0.05409, 0.05382, 0.05351,
                          0.0532, 0.05289, 0.05258, 0.05225, 0.05187, 0.0515, 0.05112, 0.05074, 0.05037, 0.04999,
                          0.04961, 0.04923, 0.04885, 0.04846, 0.04806, 0.04766, 0.04725, 0.04685, 0.04648, 0.04618,
                          0.04589, 0.04559, 0.04529, 0.045, 0.04472, 0.04444, 0.04416, 0.04389, 0.04365, 0.04355,
                          0.04346, 0.04336, 0.04326, 0.04316, 0.04302, 0.04289, 0.04275, 0.04262, 0.04248, 0.04232,
                          0.04217, 0.04201, 0.04185, 0.04169, 0.0415, 0.04132, 0.04113, 0.04094, 0.04075, 0.04052,
                          0.04028, 0.04005, 0.03982, 0.0396, 0.03954, 0.03948, 0.03942, 0.03937, 0.0393, 0.03917,
                          0.03903, 0.0389, 0.03876, 0.03862, 0.0385, 0.03838, 0.03826, 0.03814],
                         'newsat', 'nir')


class NewsatPan(SRF):
    def __init__(self):
        # estimated by Satellogic
        super().__init__(400, 749,
                         [0.06877, 0.06877, 0.06877, 0.06942, 0.07008, 0.07073, 0.07139, 0.07205, 0.07277, 0.07349,
                          0.07421, 0.07493, 0.07566, 0.07607, 0.07646, 0.07685, 0.07724, 0.07763, 0.07806, 0.0785,
                          0.07893, 0.07937, 0.0798, 0.08034, 0.08091, 0.08147, 0.08203, 0.08259, 0.08306, 0.08351,
                          0.08397, 0.08442, 0.08488, 0.08534, 0.0858, 0.08626, 0.08672, 0.08718, 0.08758, 0.08798,
                          0.08837, 0.08876, 0.08915, 0.08949, 0.08981, 0.09014, 0.09046, 0.09079, 0.09116, 0.09155,
                          0.09194, 0.09233, 0.09272, 0.09311, 0.0935, 0.09389, 0.09429, 0.09468, 0.09502, 0.09534,
                          0.09566, 0.09598, 0.0963, 0.09655, 0.09675, 0.09696, 0.09716, 0.09737, 0.09763, 0.09792,
                          0.09821, 0.0985, 0.09879, 0.09904, 0.09927, 0.0995, 0.09973, 0.09996, 0.1003, 0.10072,
                          0.10114, 0.10156, 0.10198, 0.10252, 0.10318, 0.10384, 0.1045, 0.10517, 0.1057, 0.10609,
                          0.10648, 0.10687, 0.10726, 0.10753, 0.10767, 0.1078, 0.10794, 0.10808, 0.10821, 0.10833,
                          0.10846, 0.10859, 0.10872, 0.10892, 0.10926, 0.10959, 0.10992, 0.11026, 0.11059, 0.11091,
                          0.11124, 0.11157, 0.11189, 0.11224, 0.11261, 0.11298, 0.11336, 0.11373, 0.11411, 0.11449,
                          0.11487, 0.11525, 0.11564, 0.116, 0.11633, 0.11665, 0.11697, 0.11729, 0.11761, 0.11791,
                          0.11822, 0.11852, 0.11882, 0.11907, 0.11912, 0.11917, 0.11922, 0.11927, 0.11933, 0.1194,
                          0.11948, 0.11956, 0.11964, 0.1197, 0.11967, 0.11964, 0.11962, 0.11959, 0.11957, 0.11957,
                          0.11957, 0.11957, 0.11957, 0.11957, 0.11957, 0.11957, 0.11957, 0.11957, 0.11958, 0.11979,
                          0.12, 0.1202, 0.12041, 0.12063, 0.12109, 0.12155, 0.12201, 0.12247, 0.12293, 0.12301, 0.1231,
                          0.12319, 0.12328, 0.12337, 0.12317, 0.12296, 0.12275, 0.12254, 0.12233, 0.1224, 0.12247,
                          0.12255, 0.12263, 0.12271, 0.12294, 0.12319, 0.12344, 0.1237, 0.12395, 0.12405, 0.12414,
                          0.12422, 0.12431, 0.12439, 0.12435, 0.12428, 0.12421, 0.12414, 0.12407, 0.12434, 0.12467,
                          0.12501, 0.12535, 0.12569, 0.12627, 0.12693, 0.12758, 0.12823, 0.12888, 0.12946, 0.13002,
                          0.13057, 0.13113, 0.13169, 0.1322, 0.13269, 0.13319, 0.13368, 0.13418, 0.13472, 0.13529,
                          0.13586, 0.13643, 0.137, 0.13759, 0.13819, 0.13879, 0.13939, 0.13999, 0.1401, 0.13992,
                          0.13975, 0.13958, 0.1394, 0.13897, 0.13837, 0.13778, 0.13718, 0.13658, 0.13619, 0.13595,
                          0.13571, 0.13547, 0.13523, 0.13512, 0.13512, 0.13512, 0.13512, 0.13512, 0.13496, 0.13464,
                          0.13432, 0.13401, 0.13369, 0.13333, 0.13292, 0.13251, 0.13209, 0.13168, 0.13141, 0.13132,
                          0.13122, 0.13112, 0.13103, 0.13097, 0.13097, 0.13097, 0.13097, 0.13097, 0.13083, 0.13048,
                          0.13013, 0.12979, 0.12944, 0.12901, 0.12846, 0.12791, 0.12735, 0.1268, 0.1265, 0.1267, 0.1269,
                          0.1271, 0.1273, 0.12766, 0.12836, 0.12906, 0.12976, 0.13046, 0.13096, 0.13095, 0.13094,
                          0.13093, 0.13092, 0.13082, 0.13047, 0.13012, 0.12977, 0.12941, 0.129, 0.12834, 0.12768,
                          0.12703, 0.12637, 0.12568, 0.12488, 0.12408, 0.12328, 0.12247, 0.12171, 0.12116, 0.12062,
                          0.12008, 0.11953, 0.11902, 0.11877, 0.11852, 0.11826, 0.11801, 0.11778, 0.11777, 0.11776,
                          0.11775, 0.11774, 0.11773, 0.11776, 0.11778, 0.1178, 0.11782, 0.11784, 0.1177, 0.11756,
                          0.11742, 0.11729, 0.11715, 0.11699, 0.11682, 0.11666, 0.11649, 0.11633, 0.11594, 0.11554,
                          0.11514, 0.11475, 0.11435, 0.11389, 0.11343, 0.11297, 0.11251, 0.11205],
                         'newsat', 'pan')


def plot_srfs(srfs, colors=band_colors, styles=satellite_styles, fig=None, title=None, show=False):
    """
    plots multiple SRFs
    :param srfs: [SRF]
    :param colors: { band_name -> plt color }, e.g. {'red': 'r'}. optional
    :param styles:  { satellite_name -> plt style }, e.g. {'landsat8': 'o-'}. optional
    :param fig: plt.figure
    :param title:
    :param show: if true - shows the plt.figure
    :return: plt.figure
    """
    if fig is None:
        fig = plt.figure()
    for srf in srfs:
        df = srf.as_dataframe()
        if len(df) > 0:
            style = colors.get(srf.band, '') + styles.get(srf.satellite, '')
            artists = plt.plot(df, style)
            artists[0].set_label('{}_{}'.format(srf.satellite, srf.band))

    fig.autofmt_xdate()
    plt.title(title or 'Spectral Response Functions')
    plt.grid()
    plt.legend(bbox_to_anchor=(1.04, 1), loc="upper left")
    plt.tight_layout()
    if show:
        plt.show()  # pragma: no cover

    return fig
